
USART_SPI_list302dl_REGISTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08000f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000124  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000138  20000138  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004d8e  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000da4  00000000  00000000  00024dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004f8  00000000  00000000  00025b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000470  00000000  00000000  00026070  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001f0a  00000000  00000000  000264e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000205d  00000000  00000000  000283ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002a447  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000013b8  00000000  00000000  0002a4c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002b87c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f0c 	.word	0x08000f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08000f0c 	.word	0x08000f0c

080001c8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <DAC_SetChannel1Data+0x34>)
 80001da:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4413      	add	r3, r2
 80001e2:	3308      	adds	r3, #8
 80001e4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	461a      	mov	r2, r3
 80001ea:	887b      	ldrh	r3, [r7, #2]
 80001ec:	6013      	str	r3, [r2, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40007400 	.word	0x40007400

08000200 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	4b25      	ldr	r3, [pc, #148]	; (80002ac <DMA_Init+0xac>)
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800022a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000236:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000242:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000254:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	4313      	orrs	r3, r2
 800025a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f023 0307 	bic.w	r3, r3, #7
 800026e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4313      	orrs	r3, r2
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	691a      	ldr	r2, [r3, #16]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	689a      	ldr	r2, [r3, #8]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	60da      	str	r2, [r3, #12]
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	f01c803f 	.word	0xf01c803f

080002b0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002ce:	e005      	b.n	80002dc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 0201 	bic.w	r2, r3, #1
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	601a      	str	r2, [r3, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d002      	beq.n	8000306 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e001      	b.n	800030a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000318:	b480      	push	{r7}
 800031a:	b087      	sub	sp, #28
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a15      	ldr	r2, [pc, #84]	; (8000384 <DMA_GetFlagStatus+0x6c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d802      	bhi.n	8000338 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <DMA_GetFlagStatus+0x70>)
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	e001      	b.n	800033c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <DMA_GetFlagStatus+0x74>)
 800033a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000346:	693b      	ldr	r3, [r7, #16]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	e002      	b.n	8000354 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800035a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800035e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	4002640f 	.word	0x4002640f
 8000388:	40026000 	.word	0x40026000
 800038c:	40026400 	.word	0x40026400

08000390 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a10      	ldr	r2, [pc, #64]	; (80003e0 <DMA_ClearFlag+0x50>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d802      	bhi.n	80003a8 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <DMA_ClearFlag+0x54>)
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e001      	b.n	80003ac <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <DMA_ClearFlag+0x58>)
 80003aa:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d007      	beq.n	80003c6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003bc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003c4:	e006      	b.n	80003d4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003cc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d0:	68fa      	ldr	r2, [r7, #12]
 80003d2:	6093      	str	r3, [r2, #8]
}
 80003d4:	bf00      	nop
 80003d6:	3714      	adds	r7, #20
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	4002640f 	.word	0x4002640f
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026400 	.word	0x40026400

080003ec <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	887a      	ldrh	r2, [r7, #2]
 80003fc:	819a      	strh	r2, [r3, #12]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800040a:	b480      	push	{r7}
 800040c:	b085      	sub	sp, #20
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	891b      	ldrh	r3, [r3, #8]
 800041e:	b29a      	uxth	r2, r3
 8000420:	887b      	ldrh	r3, [r7, #2]
 8000422:	4013      	ands	r3, r2
 8000424:	b29b      	uxth	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d002      	beq.n	8000430 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800042a:	2301      	movs	r3, #1
 800042c:	73fb      	strb	r3, [r7, #15]
 800042e:	e001      	b.n	8000434 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000448:	4b38      	ldr	r3, [pc, #224]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	4b38      	ldr	r3, [pc, #224]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4619      	mov	r1, r3
 8000452:	4610      	mov	r0, r2
 8000454:	f7ff ff60 	bl	8000318 <DMA_GetFlagStatus>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d064      	beq.n	8000528 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800045e:	4b35      	ldr	r3, [pc, #212]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d04c      	beq.n	8000500 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000466:	bf00      	nop
 8000468:	4b30      	ldr	r3, [pc, #192]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff ff3b 	bl	80002e8 <DMA_GetCmdStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f7      	bne.n	8000468 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	4610      	mov	r0, r2
 8000484:	f7ff ff84 	bl	8000390 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 8000490:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000492:	4b28      	ldr	r3, [pc, #160]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	4293      	cmp	r3, r2
 800049c:	bf28      	it	cs
 800049e:	4613      	movcs	r3, r2
 80004a0:	4a26      	ldr	r2, [pc, #152]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004a2:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4924      	ldr	r1, [pc, #144]	; (800053c <Audio_MAL_IRQHandler+0xf8>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fea8 	bl	8000200 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fefa 	bl	80002b0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004c8:	d203      	bcs.n	80004d2 <Audio_MAL_IRQHandler+0x8e>
 80004ca:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	e000      	b.n	80004d4 <Audio_MAL_IRQHandler+0x90>
 80004d2:	4b1b      	ldr	r3, [pc, #108]	; (8000540 <Audio_MAL_IRQHandler+0xfc>)
 80004d4:	4413      	add	r3, r2
 80004d6:	4a18      	ldr	r2, [pc, #96]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 80004d8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e6:	428b      	cmp	r3, r1
 80004e8:	bf28      	it	cs
 80004ea:	460b      	movcs	r3, r1
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	4a11      	ldr	r2, [pc, #68]	; (8000534 <Audio_MAL_IRQHandler+0xf0>)
 80004f0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2101      	movs	r1, #1
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fed9 	bl	80002b0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80004fe:	e013      	b.n	8000528 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fed2 	bl	80002b0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <Audio_MAL_IRQHandler+0xe8>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <Audio_MAL_IRQHandler+0xec>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f7ff ff3a 	bl	8000390 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <Audio_MAL_IRQHandler+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f000 faba 	bl	8000a9c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000008 	.word	0x20000008
 8000530:	2000000c 	.word	0x2000000c
 8000534:	20000000 	.word	0x20000000
 8000538:	20000030 	.word	0x20000030
 800053c:	20000070 	.word	0x20000070
 8000540:	0001fffe 	.word	0x0001fffe

08000544 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000548:	f7ff ff7c 	bl	8000444 <Audio_MAL_IRQHandler>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000554:	f7ff ff76 	bl	8000444 <Audio_MAL_IRQHandler>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000560:	2102      	movs	r1, #2
 8000562:	480d      	ldr	r0, [pc, #52]	; (8000598 <SPI3_IRQHandler+0x3c>)
 8000564:	f7ff ff51 	bl	800040a <SPI_I2S_GetFlagStatus>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d011      	beq.n	8000592 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <SPI3_IRQHandler+0x40>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d106      	bne.n	8000584 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000576:	f000 fa9c 	bl	8000ab2 <EVAL_AUDIO_GetSampleCallBack>
 800057a:	4603      	mov	r3, r0
 800057c:	4619      	mov	r1, r3
 800057e:	2004      	movs	r0, #4
 8000580:	f7ff fe22 	bl	80001c8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000584:	f000 fa95 	bl	8000ab2 <EVAL_AUDIO_GetSampleCallBack>
 8000588:	4603      	mov	r3, r0
 800058a:	4619      	mov	r1, r3
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <SPI3_IRQHandler+0x3c>)
 800058e:	f7ff ff2d 	bl	80003ec <SPI_I2S_SendData>
  }
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40003c00 	.word	0x40003c00
 800059c:	20000004 	.word	0x20000004

080005a0 <delayy>:
char tx_buffer[50];

int i = 0;

void delayy(uint32_t time)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	while(time--);
 80005a8:	bf00      	nop
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	1e5a      	subs	r2, r3, #1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1fa      	bne.n	80005aa <delayy+0xa>
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <RCC_Config>:

void RCC_Config()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	RCC->CR |= 0x00010000;			// HSEON and HSEONRDY enable
 80005c4:	4a24      	ldr	r2, [pc, #144]	; (8000658 <RCC_Config+0x98>)
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <RCC_Config+0x98>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ce:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & 0x00020000));	// HSEON Ready Flag wait
 80005d0:	bf00      	nop
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <RCC_Config+0x98>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <RCC_Config+0x12>
	RCC->CR |= 0x00080000;			// CSS Enable
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <RCC_Config+0x98>)
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <RCC_Config+0x98>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005e8:	6013      	str	r3, [r2, #0]
	RCC->CR |= 0x01000000;			//pll enable
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <RCC_Config+0x98>)
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <RCC_Config+0x98>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f4:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= 0x00400000;		// PLL e HSE seçtik
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <RCC_Config+0x98>)
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <RCC_Config+0x98>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000600:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000004;		// PLL M = 4
 8000602:	4a15      	ldr	r2, [pc, #84]	; (8000658 <RCC_Config+0x98>)
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <RCC_Config+0x98>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00005A00;		// Pll N = 168
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <RCC_Config+0x98>)
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <RCC_Config+0x98>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	f443 43b4 	orr.w	r3, r3, #23040	; 0x5a00
 8000618:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0x00000000;		// PLL p = 2
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <RCC_Config+0x98>)
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <RCC_Config+0x98>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 0x00000000;		// AHB Prescaler = 1
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <RCC_Config+0x98>)
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <RCC_Config+0x98>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00080000;		// APB2 Prescaler = 2
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <RCC_Config+0x98>)
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <RCC_Config+0x98>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000634:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 0x00001400;		// APB1 Prescaler = 4
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <RCC_Config+0x98>)
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <RCC_Config+0x98>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000640:	6093      	str	r3, [r2, #8]
	RCC->CIR |= 0x00800000;			// CSS Flag clear
 8000642:	4a05      	ldr	r2, [pc, #20]	; (8000658 <RCC_Config+0x98>)
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <RCC_Config+0x98>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800064c:	60d3      	str	r3, [r2, #12]
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	40023800 	.word	0x40023800

0800065c <GPIO_Config>:

void GPIO_Config()
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

	/********** PA5-PA6-PA7 (for SPI) **********/
	RCC->AHB1ENR |= (1 << 0);								// AHB1 A pin enabled
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <GPIO_Config+0xc8>)
 8000662:	4b30      	ldr	r3, [pc, #192]	; (8000724 <GPIO_Config+0xc8>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= (2 << 10) | (2 << 12) | (2 << 14);		// A5-A6-A7 Alternate function ?
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <GPIO_Config+0xcc>)
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <GPIO_Config+0xcc>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000676:	6013      	str	r3, [r2, #0]
	//GPIOA->OTYPER |= (0 << 5) | (0 << 6) | (0 << 7);		// A5-A6-A7 Output push-pull
	GPIOA->OSPEEDR |= (2 << 10) | (2 << 12) | (2 << 14);	// A5-A6-A7 High speed
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <GPIO_Config+0xcc>)
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <GPIO_Config+0xcc>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000682:	6093      	str	r3, [r2, #8]
	//GPIOA->PUPDR |= (2 << 10) | (2 << 12) | (2 << 14);	// A5-A6-A7 Pull Down ?
	GPIOA->AFR[0] |= (5 << 20) | (5 << 24) | (5 << 28);		// A5-A6-A7 Alternate function bit set
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <GPIO_Config+0xcc>)
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <GPIO_Config+0xcc>)
 8000688:	6a1b      	ldr	r3, [r3, #32]
 800068a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800068e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000692:	6213      	str	r3, [r2, #32]

	RCC->AHB1ENR |= (1 << 4);								// AHB1 E pin enabled
 8000694:	4a23      	ldr	r2, [pc, #140]	; (8000724 <GPIO_Config+0xc8>)
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <GPIO_Config+0xc8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOE->MODER |= (1 << 6);								// E3 Output
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <GPIO_Config+0xd0>)
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <GPIO_Config+0xd0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006aa:	6013      	str	r3, [r2, #0]
	//GPIOE->OTYPER |= (0 << 3) | (0 << 4) | (0 <<5);		// A3-A4-A5 Output push-pull ?
	GPIOE->OSPEEDR |= (2 << 6);								// A3 High Speed
 80006ac:	4a1f      	ldr	r2, [pc, #124]	; (800072c <GPIO_Config+0xd0>)
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <GPIO_Config+0xd0>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b6:	6093      	str	r3, [r2, #8]
	//GPIOE->PUPDR |= (2 << 6) | (2 << 8) | (2 << 10);		// A3-A4-A5 Pull Down ?

	/********** PD12-PD13-PD14-PD15 (for LED) **********/
	RCC->AHB1ENR |= (1 << 3);											// Enable clock for GPIOD and Configure PD12 in output mode +
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <GPIO_Config+0xc8>)
 80006ba:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <GPIO_Config+0xc8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (1 << 24) | (1 << 26)  |  (1 << 28) | (1 << 30);	// Port D -> Pin 12 | Pin 13 | Pin 14 | Pin 15 Output selected +
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <GPIO_Config+0xd4>)
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <GPIO_Config+0xd4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= (2 << 24) | (2 << 26)  |  (2 << 28) | (2 << 30);	// High Speed
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <GPIO_Config+0xd4>)
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <GPIO_Config+0xd4>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	f043 432a 	orr.w	r3, r3, #2852126720	; 0xaa000000
 80006da:	6093      	str	r3, [r2, #8]
	//GPIOD->PUPDR |= (2 << 24) | (2 << 26)  |  (2 << 28) | (2 << 30);	// Pull Down Mode

	/********** PA2-PA3 (for USART) **********/
	GPIOA->MODER |= (2<<4);  // Bits (5:4)= 1:0 --> Alternate Function for Pin PA2
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <GPIO_Config+0xcc>)
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <GPIO_Config+0xcc>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f043 0320 	orr.w	r3, r3, #32
 80006e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2<<6);  // Bits (7:6)= 1:0 --> Alternate Function for Pin PA3
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <GPIO_Config+0xcc>)
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <GPIO_Config+0xcc>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	6013      	str	r3, [r2, #0]

	GPIOA->OSPEEDR |= (3<<4) | (3<<6);  // Bits (5:4)= 1:1 and Bits (7:6)= 1:1 --> High Speed for PIN PA2 and PA3
 80006f4:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <GPIO_Config+0xcc>)
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <GPIO_Config+0xcc>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80006fe:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] |= (7<<8);  // Bytes (11:10:9:8) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA2
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <GPIO_Config+0xcc>)
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <GPIO_Config+0xcc>)
 8000704:	6a1b      	ldr	r3, [r3, #32]
 8000706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800070a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (7<<12); // Bytes (15:14:13:12) = 0:1:1:1  --> AF7 Alternate function for USART2 at Pin PA3
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <GPIO_Config+0xcc>)
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <GPIO_Config+0xcc>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000716:	6213      	str	r3, [r2, #32]

}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020000 	.word	0x40020000
 800072c:	40021000 	.word	0x40021000
 8000730:	40020c00 	.word	0x40020c00

08000734 <USART_Config>:

void USART_Config()
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	// Enable the UART CLOCK and GPIO CLOCK
	RCC->APB1ENR |= (1<<17);  // Enable UART2 CLOCK
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <USART_Config+0x68>)
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <USART_Config+0x68>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000742:	6413      	str	r3, [r2, #64]	; 0x40

	// Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USART2->CR1 = 0x00;  // clear all
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <USART_Config+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= (1<<13);  // UE = 1... Enable USART
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <USART_Config+0x6c>)
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <USART_Config+0x6c>)
 800074e:	899b      	ldrh	r3, [r3, #12]
 8000750:	b29b      	uxth	r3, r3
 8000752:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000756:	b29b      	uxth	r3, r3
 8000758:	8193      	strh	r3, [r2, #12]

	// Program the M bit in USART_CR1 to define the word length.
	USART2->CR1 &= ~(1<<12);  // M =0; 8 bit word length
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <USART_Config+0x6c>)
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <USART_Config+0x6c>)
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	b29b      	uxth	r3, r3
 8000762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000766:	b29b      	uxth	r3, r3
 8000768:	8193      	strh	r3, [r2, #12]

	// Select the desired baud rate using the USART_BRR register.
	//USART2->BRR = (7<<0) | (24<<4);   // Baud rate of 115200, PCLK1 at 45MHz
	USART2->BRR = 0x1112;			// Baud Rate 9600
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <USART_Config+0x6c>)
 800076c:	f241 1212 	movw	r2, #4370	; 0x1112
 8000770:	811a      	strh	r2, [r3, #8]

	// Enable the Transmitter/Receiver by Setting the TE and RE bits in USART_CR1 Register
	USART2->CR1 |= (1<<2); // RE=1.. Enable the Receiver
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <USART_Config+0x6c>)
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <USART_Config+0x6c>)
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b29b      	uxth	r3, r3
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	b29b      	uxth	r3, r3
 8000780:	8193      	strh	r3, [r2, #12]
	USART2->CR1 |= (1<<3);  // TE=1.. Enable Transmitter
 8000782:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <USART_Config+0x6c>)
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <USART_Config+0x6c>)
 8000786:	899b      	ldrh	r3, [r3, #12]
 8000788:	b29b      	uxth	r3, r3
 800078a:	f043 0308 	orr.w	r3, r3, #8
 800078e:	b29b      	uxth	r3, r3
 8000790:	8193      	strh	r3, [r2, #12]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800
 80007a0:	40004400 	.word	0x40004400

080007a4 <UART2_SendChar>:


void UART2_SendChar (uint8_t c)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	USART2->DR = c; 			      	 // load the data into DR register
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <UART2_SendChar+0x30>)
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	b292      	uxth	r2, r2
 80007b4:	809a      	strh	r2, [r3, #4]
	while (!(USART2->SR & (1<<6)));  	// Wait for TC to SET.. This indicates that the data has been transmitted
 80007b6:	bf00      	nop
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <UART2_SendChar+0x30>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <UART2_SendChar+0x14>
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40004400 	.word	0x40004400

080007d8 <UART2_SendString>:

void UART2_SendString (char *string)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	while (*string) UART2_SendChar (*string++);
 80007e0:	e006      	b.n	80007f0 <UART2_SendString+0x18>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	607a      	str	r2, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffda 	bl	80007a4 <UART2_SendChar>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f4      	bne.n	80007e2 <UART2_SendString+0xa>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SPI_Config>:
    }
}


void SPI_Config()
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 12);								// SPI1 Clock Enable
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <SPI_Config+0x90>)
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SPI_Config+0x90>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800080e:	6453      	str	r3, [r2, #68]	; 0x44
	SPI1->CR1 |= (0 << 3);									// fPCLK/2 -> 84/2 = 42MHz
 8000810:	4b20      	ldr	r3, [pc, #128]	; (8000894 <SPI_Config+0x94>)
 8000812:	4a20      	ldr	r2, [pc, #128]	; (8000894 <SPI_Config+0x94>)
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	b292      	uxth	r2, r2
 8000818:	801a      	strh	r2, [r3, #0]
	SPI1->CR1 |= (1 << 0);									// Second clock transition first data capture edge.
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <SPI_Config+0x94>)
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <SPI_Config+0x94>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	b29b      	uxth	r3, r3
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	8013      	strh	r3, [r2, #0]
	//SPI1->CR1 |= (1 << 0);
	SPI1->CR1 |= (0 << 11);									// 8 bit data
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <SPI_Config+0x94>)
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <SPI_Config+0x94>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	b292      	uxth	r2, r2
 8000832:	801a      	strh	r2, [r3, #0]
	SPI1->CR1 |= (0 << 10);									// Full duplex (Transmit and receive)
 8000834:	4b17      	ldr	r3, [pc, #92]	; (8000894 <SPI_Config+0x94>)
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <SPI_Config+0x94>)
 8000838:	8812      	ldrh	r2, [r2, #0]
 800083a:	b292      	uxth	r2, r2
 800083c:	801a      	strh	r2, [r3, #0]
	SPI1->CR1 |= (0 << 7);									// MSB priority
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <SPI_Config+0x94>)
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <SPI_Config+0x94>)
 8000842:	8812      	ldrh	r2, [r2, #0]
 8000844:	b292      	uxth	r2, r2
 8000846:	801a      	strh	r2, [r3, #0]
	SPI1->CR1 |= (1 << 2);									// Master mode
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <SPI_Config+0x94>)
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <SPI_Config+0x94>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	b29b      	uxth	r3, r3
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	b29b      	uxth	r3, r3
 8000856:	8013      	strh	r3, [r2, #0]
	SPI1->CR1 |= (1 << 9) | (1 << 8);						// Software slave management enabled														// It ýs set when SSM is set
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <SPI_Config+0x94>)
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <SPI_Config+0x94>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b29b      	uxth	r3, r3
 8000860:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000864:	b29b      	uxth	r3, r3
 8000866:	8013      	strh	r3, [r2, #0]
	SPI1->CR1 |= (1 << 6);									// SPI Enable
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SPI_Config+0x94>)
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <SPI_Config+0x94>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000874:	b29b      	uxth	r3, r3
 8000876:	8013      	strh	r3, [r2, #0]

	GPIOE->ODR |= (1 << 3);
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <SPI_Config+0x98>)
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <SPI_Config+0x98>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6153      	str	r3, [r2, #20]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40013000 	.word	0x40013000
 8000898:	40021000 	.word	0x40021000

0800089c <SPI_Write>:


void  SPI_Write(uint8_t address, uint8_t data)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]

	GPIOE->ODR &= ~(1 << 3);
 80008ac:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <SPI_Write+0x8c>)
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <SPI_Write+0x8c>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f023 0308 	bic.w	r3, r3, #8
 80008b6:	6153      	str	r3, [r2, #20]
	while (!((SPI1->SR)&(1<<1)));  							// wait for TXE bit to set -> This will indicate that the buffer is empty
 80008b8:	bf00      	nop
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SPI_Write+0x90>)
 80008bc:	891b      	ldrh	r3, [r3, #8]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f8      	beq.n	80008ba <SPI_Write+0x1e>
	SPI1->DR = address;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <SPI_Write+0x90>)
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	b292      	uxth	r2, r2
 80008ce:	819a      	strh	r2, [r3, #12]
	while (!((SPI1->SR) &(1<<0)));							// Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 80008d0:	bf00      	nop
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <SPI_Write+0x90>)
 80008d4:	891b      	ldrh	r3, [r3, #8]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f8      	beq.n	80008d2 <SPI_Write+0x36>
	SPI1->DR;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <SPI_Write+0x90>)
 80008e2:	899b      	ldrh	r3, [r3, #12]

	while (!((SPI1->SR)&(1<<1)));  							// wait for TXE bit to set -> This will indicate that the buffer is empty
 80008e4:	bf00      	nop
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <SPI_Write+0x90>)
 80008e8:	891b      	ldrh	r3, [r3, #8]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f8      	beq.n	80008e6 <SPI_Write+0x4a>
	SPI1->DR = data;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <SPI_Write+0x90>)
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	b292      	uxth	r2, r2
 80008fa:	819a      	strh	r2, [r3, #12]
	while (!((SPI1->SR) &(1<<0)));							// // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 80008fc:	bf00      	nop
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <SPI_Write+0x90>)
 8000900:	891b      	ldrh	r3, [r3, #8]
 8000902:	b29b      	uxth	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	2b00      	cmp	r3, #0
 800090a:	d0f8      	beq.n	80008fe <SPI_Write+0x62>
	SPI1->DR;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <SPI_Write+0x90>)
 800090e:	899b      	ldrh	r3, [r3, #12]
	GPIOE->ODR |= (1 << 3);
 8000910:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SPI_Write+0x8c>)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SPI_Write+0x8c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6153      	str	r3, [r2, #20]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000
 800092c:	40013000 	.word	0x40013000

08000930 <SPI_Read>:

uint8_t SPI_Read(uint8_t address, uint8_t data)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	460a      	mov	r2, r1
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	71bb      	strb	r3, [r7, #6]
	GPIOE->ODR &= ~(1 << 3);
 8000940:	4a22      	ldr	r2, [pc, #136]	; (80009cc <SPI_Read+0x9c>)
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <SPI_Read+0x9c>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	f023 0308 	bic.w	r3, r3, #8
 800094a:	6153      	str	r3, [r2, #20]
	address = address | 0x80;	// okuma islemi yapilacak
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000952:	71fb      	strb	r3, [r7, #7]
	while (!((SPI1->SR)&(1<<1)));  							// wait for TXE bit to set -> This will indicate that the buffer is empty
 8000954:	bf00      	nop
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <SPI_Read+0xa0>)
 8000958:	891b      	ldrh	r3, [r3, #8]
 800095a:	b29b      	uxth	r3, r3
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f8      	beq.n	8000956 <SPI_Read+0x26>
	SPI1->DR = address;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <SPI_Read+0xa0>)
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	b292      	uxth	r2, r2
 800096a:	819a      	strh	r2, [r3, #12]
	while (!((SPI1->SR) &(1<<0)));							// // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 800096c:	bf00      	nop
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <SPI_Read+0xa0>)
 8000970:	891b      	ldrh	r3, [r3, #8]
 8000972:	b29b      	uxth	r3, r3
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f8      	beq.n	800096e <SPI_Read+0x3e>
	SPI1->DR;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <SPI_Read+0xa0>)
 800097e:	899b      	ldrh	r3, [r3, #12]
	while (!((SPI1->SR)&(1<<1)));  							// wait for TXE bit to set -> This will indicate that the buffer is empty
 8000980:	bf00      	nop
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <SPI_Read+0xa0>)
 8000984:	891b      	ldrh	r3, [r3, #8]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f8      	beq.n	8000982 <SPI_Read+0x52>
	SPI1->DR = data;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <SPI_Read+0xa0>)
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	b292      	uxth	r2, r2
 8000996:	819a      	strh	r2, [r3, #12]
	while (!((SPI1->SR) &(1<<0)));							// // Wait for RXNE to set -> This will indicate that the Rx buffer is not empty
 8000998:	bf00      	nop
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <SPI_Read+0xa0>)
 800099c:	891b      	ldrh	r3, [r3, #8]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f8      	beq.n	800099a <SPI_Read+0x6a>
	SPI1->DR;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <SPI_Read+0xa0>)
 80009aa:	899b      	ldrh	r3, [r3, #12]
	GPIOE->ODR |= (1 << 3);
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <SPI_Read+0x9c>)
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <SPI_Read+0x9c>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6153      	str	r3, [r2, #20]
	return 	SPI1->DR;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SPI_Read+0xa0>)
 80009ba:	899b      	ldrh	r3, [r3, #12]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40013000 	.word	0x40013000

080009d4 <main>:

int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  RCC_Config();
 80009d8:	f7ff fdf2 	bl	80005c0 <RCC_Config>
  GPIO_Config();
 80009dc:	f7ff fe3e 	bl	800065c <GPIO_Config>
  SPI_Config();
 80009e0:	f7ff ff0e 	bl	8000800 <SPI_Config>
  USART_Config();
 80009e4:	f7ff fea6 	bl	8000734 <USART_Config>

  SPI_Write(0x20, 0x47);		// CTRL_REG1 100Hz +-8g
 80009e8:	2147      	movs	r1, #71	; 0x47
 80009ea:	2020      	movs	r0, #32
 80009ec:	f7ff ff56 	bl	800089c <SPI_Write>

  while (1)
  {
	  x = SPI_Read(x_address, 0x00);
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <main+0xa4>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff9a 	bl	8000930 <SPI_Read>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b25a      	sxtb	r2, r3
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <main+0xa8>)
 8000a02:	701a      	strb	r2, [r3, #0]
	  y = SPI_Read(y_address, 0x00);
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <main+0xac>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff90 	bl	8000930 <SPI_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <main+0xb0>)
 8000a16:	701a      	strb	r2, [r3, #0]
	  z = SPI_Read(z_address, 0x00);
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <main+0xb4>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff86 	bl	8000930 <SPI_Read>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b25a      	sxtb	r2, r3
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <main+0xb8>)
 8000a2a:	701a      	strb	r2, [r3, #0]

	  sprintf(str,"%d \n", x);
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <main+0xa8>)
 8000a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4916      	ldr	r1, [pc, #88]	; (8000a90 <main+0xbc>)
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <main+0xc0>)
 8000a38:	f000 fa2e 	bl	8000e98 <siprintf>
	  UART2_SendString(str);
 8000a3c:	4815      	ldr	r0, [pc, #84]	; (8000a94 <main+0xc0>)
 8000a3e:	f7ff fecb 	bl	80007d8 <UART2_SendString>

	  sprintf(str,"%d \n", y);
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <main+0xb0>)
 8000a44:	f993 3000 	ldrsb.w	r3, [r3]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4911      	ldr	r1, [pc, #68]	; (8000a90 <main+0xbc>)
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0xc0>)
 8000a4e:	f000 fa23 	bl	8000e98 <siprintf>
	  UART2_SendString(str);
 8000a52:	4810      	ldr	r0, [pc, #64]	; (8000a94 <main+0xc0>)
 8000a54:	f7ff fec0 	bl	80007d8 <UART2_SendString>

	  sprintf(str,"%d \n", z);
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <main+0xb8>)
 8000a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	490b      	ldr	r1, [pc, #44]	; (8000a90 <main+0xbc>)
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <main+0xc0>)
 8000a64:	f000 fa18 	bl	8000e98 <siprintf>
	  UART2_SendString(str);
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <main+0xc0>)
 8000a6a:	f7ff feb5 	bl	80007d8 <UART2_SendString>

	  delayy(600000);
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <main+0xc4>)
 8000a70:	f7ff fd96 	bl	80005a0 <delayy>
	  x = SPI_Read(x_address, 0x00);
 8000a74:	e7bc      	b.n	80009f0 <main+0x1c>
 8000a76:	bf00      	nop
 8000a78:	20000010 	.word	0x20000010
 8000a7c:	200000ac 	.word	0x200000ac
 8000a80:	20000011 	.word	0x20000011
 8000a84:	20000101 	.word	0x20000101
 8000a88:	20000012 	.word	0x20000012
 8000a8c:	200000c4 	.word	0x200000c4
 8000a90:	08000f24 	.word	0x08000f24
 8000a94:	20000104 	.word	0x20000104
 8000a98:	000927c0 	.word	0x000927c0

08000a9c <EVAL_AUDIO_TransferComplete_CallBack>:

  }
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000aa6:	bf00      	nop
}
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <EVAL_AUDIO_GetSampleCallBack>:


uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aca:	e003      	b.n	8000ad4 <LoopCopyDataInit>

08000acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ad2:	3104      	adds	r1, #4

08000ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ad4:	480b      	ldr	r0, [pc, #44]	; (8000b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000adc:	d3f6      	bcc.n	8000acc <CopyDataInit>
  ldr  r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae0:	e002      	b.n	8000ae8 <LoopFillZerobss>

08000ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ae4:	f842 3b04 	str.w	r3, [r2], #4

08000ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aec:	d3f9      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aee:	f000 f841 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f000 f9e7 	bl	8000ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff ff6d 	bl	80009d4 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000afc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b00:	08000f34 	.word	0x08000f34
  ldr  r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b08:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000b0c:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000b10:	20000138 	.word	0x20000138

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>

08000b16 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <BusFault_Handler+0x4>

08000b36 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <UsageFault_Handler+0x4>

08000b3c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <SystemInit+0x60>)
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <SystemInit+0x60>)
 8000b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <SystemInit+0x64>)
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <SystemInit+0x64>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <SystemInit+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <SystemInit+0x64>)
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <SystemInit+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <SystemInit+0x64>)
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <SystemInit+0x68>)
 8000bae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <SystemInit+0x64>)
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <SystemInit+0x64>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <SystemInit+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000bc2:	f000 f80d 	bl	8000be0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc6:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <SystemInit+0x60>)
 8000bc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	24003010 	.word	0x24003010

08000be0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000bee:	4a36      	ldr	r2, [pc, #216]	; (8000cc8 <SetSysClock+0xe8>)
 8000bf0:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <SetSysClock+0xe8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <SetSysClock+0xe8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3301      	adds	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d103      	bne.n	8000c18 <SetSysClock+0x38>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c16:	d1f0      	bne.n	8000bfa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <SetSysClock+0xe8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c24:	2301      	movs	r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	e001      	b.n	8000c2e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d142      	bne.n	8000cba <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c34:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <SetSysClock+0xe8>)
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <SetSysClock+0xe8>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000c40:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <SetSysClock+0xec>)
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <SetSysClock+0xec>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c4a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <SetSysClock+0xe8>)
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <SetSysClock+0xe8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c54:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <SetSysClock+0xe8>)
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <SetSysClock+0xe8>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c60:	4a19      	ldr	r2, [pc, #100]	; (8000cc8 <SetSysClock+0xe8>)
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <SetSysClock+0xe8>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c6a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <SetSysClock+0xe8>)
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <SetSysClock+0xf0>)
 8000c70:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <SetSysClock+0xe8>)
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <SetSysClock+0xe8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c7c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c7e:	bf00      	nop
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SetSysClock+0xe8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f9      	beq.n	8000c80 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <SetSysClock+0xf4>)
 8000c8e:	f240 6205 	movw	r2, #1541	; 0x605
 8000c92:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <SetSysClock+0xe8>)
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <SetSysClock+0xe8>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <SetSysClock+0xe8>)
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <SetSysClock+0xe8>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000cac:	bf00      	nop
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SetSysClock+0xe8>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d1f9      	bne.n	8000cae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000
 8000cd0:	07405408 	.word	0x07405408
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000ce8:	e004      	b.n	8000cf4 <ts_itoa+0x1c>
		div *= base;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d2f3      	bcs.n	8000cea <ts_itoa+0x12>

	while (div != 0)
 8000d02:	e029      	b.n	8000d58 <ts_itoa+0x80>
	{
		int num = d/div;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d16:	fb02 f201 	mul.w	r2, r2, r1
 8000d1a:	1a9b      	subs	r3, r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b09      	cmp	r3, #9
 8000d2c:	dd0a      	ble.n	8000d44 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1c59      	adds	r1, r3, #1
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	6011      	str	r1, [r2, #0]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	3237      	adds	r2, #55	; 0x37
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e009      	b.n	8000d58 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	1c59      	adds	r1, r3, #1
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	6011      	str	r1, [r2, #0]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	3230      	adds	r2, #48	; 0x30
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1d2      	bne.n	8000d04 <ts_itoa+0x2c>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b088      	sub	sp, #32
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8000d7a:	e07d      	b.n	8000e78 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b25      	cmp	r3, #37	; 0x25
 8000d82:	d171      	bne.n	8000e68 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d01e      	beq.n	8000dd0 <ts_formatstring+0x66>
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	dc06      	bgt.n	8000da4 <ts_formatstring+0x3a>
 8000d96:	2b58      	cmp	r3, #88	; 0x58
 8000d98:	d050      	beq.n	8000e3c <ts_formatstring+0xd2>
 8000d9a:	2b63      	cmp	r3, #99	; 0x63
 8000d9c:	d00e      	beq.n	8000dbc <ts_formatstring+0x52>
 8000d9e:	2b25      	cmp	r3, #37	; 0x25
 8000da0:	d058      	beq.n	8000e54 <ts_formatstring+0xea>
 8000da2:	e05d      	b.n	8000e60 <ts_formatstring+0xf6>
 8000da4:	2b73      	cmp	r3, #115	; 0x73
 8000da6:	d02b      	beq.n	8000e00 <ts_formatstring+0x96>
 8000da8:	2b73      	cmp	r3, #115	; 0x73
 8000daa:	dc02      	bgt.n	8000db2 <ts_formatstring+0x48>
 8000dac:	2b69      	cmp	r3, #105	; 0x69
 8000dae:	d00f      	beq.n	8000dd0 <ts_formatstring+0x66>
 8000db0:	e056      	b.n	8000e60 <ts_formatstring+0xf6>
 8000db2:	2b75      	cmp	r3, #117	; 0x75
 8000db4:	d037      	beq.n	8000e26 <ts_formatstring+0xbc>
 8000db6:	2b78      	cmp	r3, #120	; 0x78
 8000db8:	d040      	beq.n	8000e3c <ts_formatstring+0xd2>
 8000dba:	e051      	b.n	8000e60 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60fa      	str	r2, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	1d11      	adds	r1, r2, #4
 8000dc6:	6079      	str	r1, [r7, #4]
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	701a      	strb	r2, [r3, #0]
				break;
 8000dce:	e047      	b.n	8000e60 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1d1a      	adds	r2, r3, #4
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da07      	bge.n	8000df0 <ts_formatstring+0x86>
					{
						val *= -1;
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	425b      	negs	r3, r3
 8000de4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	60fa      	str	r2, [r7, #12]
 8000dec:	222d      	movs	r2, #45	; 0x2d
 8000dee:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8000df0:	69f9      	ldr	r1, [r7, #28]
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	220a      	movs	r2, #10
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff6d 	bl	8000cd8 <ts_itoa>
				}
				break;
 8000dfe:	e02f      	b.n	8000e60 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1d1a      	adds	r2, r3, #4
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8000e0a:	e007      	b.n	8000e1c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	60fa      	str	r2, [r7, #12]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	1c51      	adds	r1, r2, #1
 8000e16:	61b9      	str	r1, [r7, #24]
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f3      	bne.n	8000e0c <ts_formatstring+0xa2>
					}
				}
				break;
 8000e24:	e01c      	b.n	8000e60 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	1d1a      	adds	r2, r3, #4
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	220a      	movs	r2, #10
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff4f 	bl	8000cd8 <ts_itoa>
				break;
 8000e3a:	e011      	b.n	8000e60 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1d1a      	adds	r2, r3, #4
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff43 	bl	8000cd8 <ts_itoa>
				break;
 8000e52:	e005      	b.n	8000e60 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	2225      	movs	r2, #37	; 0x25
 8000e5c:	701a      	strb	r2, [r3, #0]
				  break;
 8000e5e:	bf00      	nop
			}
			fmt++;
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	e007      	b.n	8000e78 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60fa      	str	r2, [r7, #12]
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	1c51      	adds	r1, r2, #1
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f47f af7d 	bne.w	8000d7c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1ad3      	subs	r3, r2, r3
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3720      	adds	r7, #32
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8000e98:	b40e      	push	{r1, r2, r3}
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b085      	sub	sp, #20
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000ea2:	f107 0320 	add.w	r3, r7, #32
 8000ea6:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	69f9      	ldr	r1, [r7, #28]
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff5c 	bl	8000d6a <ts_formatstring>
 8000eb2:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ec0:	b003      	add	sp, #12
 8000ec2:	4770      	bx	lr

08000ec4 <__libc_init_array>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4e0d      	ldr	r6, [pc, #52]	; (8000efc <__libc_init_array+0x38>)
 8000ec8:	4c0d      	ldr	r4, [pc, #52]	; (8000f00 <__libc_init_array+0x3c>)
 8000eca:	1ba4      	subs	r4, r4, r6
 8000ecc:	10a4      	asrs	r4, r4, #2
 8000ece:	2500      	movs	r5, #0
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	d109      	bne.n	8000ee8 <__libc_init_array+0x24>
 8000ed4:	4e0b      	ldr	r6, [pc, #44]	; (8000f04 <__libc_init_array+0x40>)
 8000ed6:	4c0c      	ldr	r4, [pc, #48]	; (8000f08 <__libc_init_array+0x44>)
 8000ed8:	f000 f818 	bl	8000f0c <_init>
 8000edc:	1ba4      	subs	r4, r4, r6
 8000ede:	10a4      	asrs	r4, r4, #2
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	42a5      	cmp	r5, r4
 8000ee4:	d105      	bne.n	8000ef2 <__libc_init_array+0x2e>
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
 8000ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eec:	4798      	blx	r3
 8000eee:	3501      	adds	r5, #1
 8000ef0:	e7ee      	b.n	8000ed0 <__libc_init_array+0xc>
 8000ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef6:	4798      	blx	r3
 8000ef8:	3501      	adds	r5, #1
 8000efa:	e7f2      	b.n	8000ee2 <__libc_init_array+0x1e>
 8000efc:	08000f2c 	.word	0x08000f2c
 8000f00:	08000f2c 	.word	0x08000f2c
 8000f04:	08000f2c 	.word	0x08000f2c
 8000f08:	08000f30 	.word	0x08000f30

08000f0c <_init>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	bf00      	nop
 8000f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f12:	bc08      	pop	{r3}
 8000f14:	469e      	mov	lr, r3
 8000f16:	4770      	bx	lr

08000f18 <_fini>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr
